asbt is a tool for managing packages in your local copy of slackbuilds,
which can be obtained from http://slackbuilds.org/ (SBo), 
for Slackware Linux.

It supports following functions/options:

1)  search the repository (-s)
2)  info about specified package (-i)
3)  readme about specified package (-r)
4)  goto the package directory (-g)
5)  view slackbuild (-v)
6)  list files contained in specified package directory (-l,-L)
7)  description about specified package (-d)
8)  get/download the package (-G)
9)  build the package (-B)
10) install the built package (-I)
11) details about installed package (-D)
12) upgrade installed package with built package (-U)
13) remove installed package (-R)
14) query installed packages (-q)
15) view all packages installed from the slackbuilds repo (-a)
16) update the local git repo of slackbuilds (-u)
17) check for upgrades to installed packages (-c)
18) view the ChangeLog.txt from the local copy of the slackbuilds repo (-C)
19) track the source and built package for specified package (-t) 
20) enlist all packages which have given package in their .info file (-e)
21) Tidy the source and package directories by removing old entries (-T)

It uses the following (Slackware) tools:

1) installpkg
2) removepkg
3) upgradepkg

Ideology:

asbt runs as a normal application, and aids in package management of SBo packages by
displaying information about the packages, getting and building them,
checking updates to the packages, and viewing details about the installed packages, etc.

When root access is required, for example, when installing or removing packages,
sudo is used to gain the root privelege. This ensures demarcation between
informational activites like searching, viewing information, etc, and activites which
change the system state, like installing or removing packages.

Also, asbt is designed with simplicity in mind; complex cases are not handled and are left to the user's discretion;
rather, it aids and automates common functions like searching for packages, downloading the source, building the packages,
and installing / upgading them, while following rules like where to store these source and built packages, and
displays information about the process in a transparent way, while at the same time tries not to hinder the user with excess verbiage.

The variables used are:

1) repodir=""
 # Repository for slackbuilds.

2) srcdir=""
 # Where the downloaded source packages are to be placed.
 # Leave it blank for saving it in the same directory as the slackbuild.

3) outdir=""
 # Where the build package will be placed. 
 # Leave it blank for putting it in /tmp.

4) gitdir=""
 # Directory where the slackbuilds git repository is present.

5) editor="" 
 # Editor for viewing/editing slackbuilds.

Samples for these variables are present in the script itself.

These can be overrided by specifying the options provided in the configuration file "/etc/asbt/asbt.conf"

Installation:

Via SBo,
http://slackbuilds.org/repository/14.1/system/asbt/

or, (as root)
make install

Usage:

asbt <option> [package]

Examples:

asbt -s dosbox (search for package dosbox)
asbt -i dosbox (read the info file for dosbox)
asbt -v dosbox (view/edit slackbuild)
asbt -G dosbox (get(download) dosbox(source))
asbt -B dosbox (build package for dosbox)
asbt -I dosbox (install built package)
asbt -I dosbox-0.74 (install specified version of built package)
asbt -D dosbox (view details about installed package dosbox)
asbt -a (list all packages installed from the slackbuilds repository)
asbt -c (check for updates to packages installed from the slackbuild repository)

Note:

1) When searching, a *(wildcard) at both ends is implied.

For example, if one wants to search for all packages which have the word "xfce", one can use-
asbt search xfce

Instead of-
asbt search '*xfce*'


2) When querying, if the package(s) is/are installed, they will they displayed,
else no output. A *(wildcard) at both ends is also implied when querying.


3) Suppose that you want to install a built package virtualbox-kernel (asbt install virtualbox-kernel),
and you get something like:

Installing virtualbox-kernel
/usr/bin/asbt: line 135: [: /home/aaditya/packages/virtualbox-kernel-4.3.4_3.10.17-x86_64-1_SBo.tgz: binary operator expected
N/A

This could be because there are 2 packages virtualbox-kernel, while it can process only one.
In such a case, expand the name of package to install, so that it can differentiate between the package versions, eg, 
asbt upgrade virtualbox-kernel-4.3.4_3.10.28


4) Giving package path instead of package supports installation of package from custom folder. For example,
asbt -B ~/builds/thermald/thermal_daemon-1.1

Here the above path is the folder which contains the source and slackbuild and related files.


5) asbt modifies the CWD=$(pwd) line in a slackbuild to CWD=${CWD:-$(pwd)} so that it can build from any location by specifying the build location.
	This change is reverted after building the package.
But if for some reason the build process was interrupted/failed, or any changes were manually made to the files, 
then the slackbuild would be changed, and git may complain about this change when updating the git repo.
	To work around this issue, first the current git state is stashed with git stash save, and then the repo is updated.
To know more about git stash, read the git-stash man page.


6) If you use other tools like sbopkg (http://sbopkg.org/) to synchronise your git repository, and if these tools are meant to be run as root (like sbopkg),
then they can change ownership of the slackbuilds git repository, and you repeatedly get messages like:

chmod: changing permissions of ‘/home/aaditya/slackbuilds/desktop/screenfetch/screenfetch.SlackBuild’: Operation not permitted
Enter your password to take ownership of the slackbuild.
Password: 

In such a case, one change ownership of the slackbuilds repository using the chown command. For example,

sudo chown -R $USER /home/$USER/slackbuilds

