#!/bin/bash
# slack : A package manager for a local slackbuilds repository.
##
# Copyright (C) 2014 Aaditya Bagga <aaditya_gnulinux@zoho.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

ver="0.2.1" # Version

# Variables
repodir="/home/$USER/git/slackbuilds" # Repository for slackbuilds
package="$2" # Name of package input by the user
srcpath="/home/$USER/src" # Where the downloaded source packages are to be placed. Leave it blank for saving it in the same directory as the slackbuild.
outpath="/home/$USER/packages" # Where the build package will be placed. Leave it blank for putting built package(s) in /tmp.
gitdir="/home/$USER/git/slackbuilds/.git" # Directory where slackbuilds git repository is stored
terminal="xfce4-terminal" # Terminal used for going to the package directory (goto option)

# Functions
get-path() {
	path=`find "$repodir" -type d -maxdepth 2 -name "$package"`
	# Check path (if directory exists)
	if [ ! -d "$path" ]; then
		echo "N/A"
		exit 1
	fi
}
get-content () {
	cat "$1" # Return the content of the argument passed.
}
get-package () {
	# Check if srcpath is specified (if yes, download is saved there)
	if [ -z "$srcpath" ]; then
		# Check for architecture in package
		if [[ `uname -m` == "x86_64" ]] && [[ -n "$linkx64" ]] && [[ `echo "$linkx64" | grep -e "http" -e "ftp"` ]] ; then
			wget --directory-prefix="$path" -N "$linkx64"
		else
			wget --directory-prefix="$path" -N "$link"
		fi
	else
		if [[ `uname -m` == "x86_64" ]] && [[ -n "$linkx64" ]] && [[ `echo "$linkx64" | grep -e "http" -e "ftp"` ]] ; then
			pkgname=`basename "$linkx64"`
			wget --directory-prefix="$srcpath" -N "$linkx64" && ln -s "$srcpath/$pkgname" "$path"
		else
			pkgname=`basename "$link"`
			wget --directory-prefix="$srcpath" -N "$link" && ln -s "$srcpath/$pkgname" "$path"
		fi
	fi
}
check-option () {
	if [ ! "$1" ]; then
		echo "Additional parameter(s) required for this option. Type slack -h for more info."
		exit 1
	fi
}

# Check no of input parameters
if [ $# -gt 3 ] ; then
	echo "Invalid Syntax. Type slack -h for more info."
	exit 1
fi

# Check directories (variables)
if [ ! -d "$repodir" ]; then
	echo "Slackbuilds repository $repodir doesnt exist.."
	exit 1 
fi

# Options
case "$1" in
search|-s)
	check-option "$2"
	find "$repodir" -maxdepth 2 -iname "$package*" ;;
info|-i)
	check-option "$2"
	get-path
	get-content "$path/$package.info" ;;
readme|-r)
	check-option "$2"
	get-path
	get-content "$path/README" ;;
goto|-g)
	check-option "$2"
	get-path
        $terminal --working-directory="$path" ;;
view|-v)
	check-option "$2"
	get-path
	less "$path/$package.SlackBuild" ;;
list|-l)
	check-option "$2"
	get-path
	ls $path ;;
desc|-d)
	check-option "$2"
	get-path
	get-content "$path/slack-desc" ;;
get|-G)
	check-option "$2"
	get-path
	link=`cat "$path/$package.info" | grep -w "DOWNLOAD"| cut -f 2 -d '"'`
	linkx64=`cat "$path/$package.info" | grep -w "DOWNLOAD_x86_64"| cut -f 2 -d '"'`
	get-package ;;

build|-B)
	check-option "$2"
	get-path
	chmod +x "$path/$package.SlackBuild"
	# Fix CWD to include path to package
	sed -i 's/CWD=$(pwd)/CWD=${CWD:-$(pwd)}/' "$path/$package.SlackBuild"
	# Check if outpath is present (if yes, built package is saved there)
	if [ -z "$outpath" ]; then
		sudo CWD="$path" "$path/$package.SlackBuild"
	else
		sudo OUTPUT="$outpath" CWD="$path" "$path/$package.SlackBuild" 
	fi 
	# After building revert the slackbuild to original state
	sed -i 's/CWD=${CWD:-$(pwd)}/CWD=$(pwd)/' "$path/$package.SlackBuild" ;;

install|-I)
	check-option "$2"
	# Check if package present
	if [ -f "$outdir/$package"* ] || [ -f "/tmp/$package"* ]; then
		# Install the package
		if [ -z "$outpath" ]; then
			# Find path of built package
			pkgpath=`ls "/tmp/$package"*`
			sudo -k /sbin/installpkg "$pkgpath"
		else
			pkgpath=`ls "$outpath/$package"*`
			sudo -k /sbin/installpkg "$pkgpath"
   		fi
        else
		echo "N/A"
		exit 1
	fi ;;

upgrade|-U)
	check-option "$2"
	# Check if package present
	if [ -f "$outdir/$package"* ] || [ -f "/tmp/$package"* ]; then
		# Upgrade the package
		if [ -z "$outpath" ]; then
			pkgpath=`ls "/tmp/$package"*`
			sudo -k /sbin/upgradepkg "$pkgpath"
		else
			pkgpath=`ls "$outpath/$package"*`
			sudo -k /sbin/upgradepkg "$pkgpath"
		fi
	else
		echo "N/A"
		exit 1

	fi ;; 

remove|-R)
	check-option "$2"
	# Check if package present
	if [ -f "/var/log/packages/$package"* ]; then
		sudo -k /sbin/removepkg "$package"
	else
		echo "N/A"
		exit 1
	fi ;;
query|-q)
	check-option "$2"
	find "/var/log/packages" -name "$package*" -printf "%f\n";;

--update|-u)
	git --git-dir="$gitdir" pull origin master ;;
--all|-a)
	find "$repodir" -type d -maxdepth 2 -mindepth 1 | less ;;
--version)
        echo -e "slack, a package manager for your local slackbuilds repository. ver-$ver" ;;
--help|-h|*)
	echo -e "Usage: slack <option> [package]\nOptions-"
	echo -e "[search,-s]\t[info,-i]\t[readme,-r]\n[goto,-g]\t[view,-v]\t[list,-l]\n[desc,-d]\t[get,-G]\t[build,-B]\n[install,-I]\t[upgrade,-U]\t[remove,-R]\n[query,-q]\t[--update,-u]\t[--all,-a]\n[--help,-h]\t[--version]\n"
       echo "For more info, see the man page and/or the README." ;;
esac

# Cleanup
unset repodir
unset package
unset terminal
unset path
unset srcpath
unset outpath
unset pkgname
unset pkgpath
unset link
unset linkx64
exit 0
