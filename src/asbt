#!/bin/bash
# asbt : A package manager for a local slackbuilds repository.
##
# Copyright (C) 2014 Aaditya Bagga <aaditya_gnulinux@zoho.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

ver="0.8.0" # Version

# Variables used:
repodir="/home/$USER/git/slackbuilds" # Repository for slackbuilds. Required.
#repodir="/home/$USER/slackbuilds" # Alternate repository for slackbuilds.
srcdir="/home/$USER/src" # Where the downloaded source is to be placed.
#srcdir="" # Leave blank for saving it in the same directory as the slackbuild.
outdir="/home/$USER/packages" # Where the build package will be placed.
#outdir="" # Leave it blank for putting built package(s) in /tmp.
gitdir="/home/$USER/git/slackbuilds/.git" # Slackbuilds git repo directory.
#gitdir="" # Leave it blank if you dont want to use the --update option.
config="/etc/asbt/asbt.conf" # Config file which over-rides above defaults.
#config="" # Leave it blank for using above defaults
editor="/usr/bin/vim" # Editor for viewing/editing slackbuilds.
#editor="/usr/bin/nano" # Alternate editor
package="$2" # Name of package input by the user.

# Check for the configuration file 
if [ -e "$config" ]; then
	. "$config"
fi

# Check the no of input parameters
if [ $# -gt 2 ] ; then
	echo "Invalid syntax. Type asbt -h for more info."
	exit 1
fi

# Check directories (variables)
if [ ! -d "$repodir" ]; then
	echo "slackbuilds repository $repodir doesnt exist.."
	exit 1 
fi

# Functions
check-option () {
	if [ ! "$1" ]; then
		echo "Additional parameter required for this option. Type asbt -h for more info."
		exit 1
	fi
}
get-path() {
	# Check if path to package is specified instead of package name
	if [ -d "$package" ]; then
		path=`readlink -f "$package"`
		# Source the .info file to get the name of the package
		if [ -f "$path"/*.info ]; then
			. "$path/"*.info
		else
			echo ".info file N/A in $path"
			exit 1
		fi
		package=$PRGNAM
	else
		path=`find -L "$repodir" -type d -maxdepth 2 -name "$package"`
	fi
	# Check path (if directory exists)
	if [ ! -d "$path" ]; then
		echo "Directory: $repodir/$package N/A"
		exit 1
	fi
}
get-info () {
	# Source the .info file to get the package details
	if [ -f "$path/$package.info" ]; then
		. "$path/$package.info"
		echo "asbt: $path/$package.info sourced."
	else
		echo "asbt: $path/$package.info N/A"
		exit 1
	fi
}
get-content () {
	if [ -f "$1" ]; then
		cat "$1" # Return the content of the argument passed.
	else
		echo "File: $1 N/A"
		exit 1
	fi
}
get-source-data () {
	get-info
	if [[ `uname -m` == "x86_64" ]] && [[ -n "$DOWNLOAD_x86_64" ]] && [[ -n "$MD5SUM_x86_64" ]]; then
		link="$DOWNLOAD_x86_64"
		arch="x86_64"
	else
		link="$DOWNLOAD"
	fi
	src=`basename "$link"`
	if [ -e "$path/$src" ]; then
		md5=`md5sum "$path/$src" | cut -f 1 -d " "`
	elif [ -f "$srcdir/$src" ]; then
		md5=`md5sum "$srcdir/$src" | cut -f 1 -d " "`
	fi
}
check-source () {
	get-source-data
	# Check if source has already been downloaded
	if [ -e "$path/$src" ]; then
		# Check validity of downloaded source
		if [ "$arch" == "x86_64" ]; then
			# 64 bit source
			if [ "$md5" == "$MD5SUM_x86_64" ]; then
				# Source valid
				valid=1
			else
				valid=0	
			fi
		else
			if [ "$md5" == "$MD5SUM" ]; then
				# Source valid
				valid=1
			else
				valid=0
			fi
		fi
	# Check if source present but not linked
	elif [ -f "$srcdir/$src" ]; then
		# Check validity of downloaded source
		if [ "$arch" == "x86_64" ]; then
			if [ "$md5" == "$MD5SUM_x86_64" ]; then
				ln -s "$srcdir/$src" "$path"
				valid=1
			else
				valid=0
			fi
		else
			if [ "$md5" == "$MD5SUM" ]; then
				ln -s "$srcdir/$src" "$path"
				valid=1
			else
				valid=0
			fi
		fi
	else
		valid=0
	fi
}
download-source () {
	echo "Downloading $src"
	# Check if srcdir is specified (if yes, download is saved there)
	if [ -z "$srcdir" ]; then
		wget --directory-prefix="$path" -N "$link"
	else
		pkgnam=`basename "$link"`
		wget --directory-prefix="$srcdir" -N "$link" && ln -sf "$srcdir/$pkgnam" "$path"
	fi
}
get-package () {
	check-source
	if [ $valid -ne 1 ]; then
		# Download the source
		download-source
	else
		echo "Source: $src present."
	fi
}
check-built-package () {
	# Source the .info file to get the package version 
	if [ -f "$path/$package.info" ]; then
		. "$path/$package.info"
	else
		VERSION="UNKNOWN"
	fi
	# Check if package has already been built
	if [ -f "/tmp/$package"*-"$VERSION"* ] 2>/dev/null || [ -f "/$outdir/$package"*-"$VERSION"* ] 2>/dev/null; then
		built=1
		echo "Package: $package-$VERSION already built."
	else
		built=0
	fi
}
process-built-package () {
	check-built-package
	if [ $built -eq 0 ]; then
		build-package
	fi
}
build-package () {
	check-built-package	
	# Check for SlackBuild
	if [ -f "$path/$package.SlackBuild" ]; then
		chmod +x "$path/$package.SlackBuild"
	else
		echo "File: $path/$package.SlackBuild N/A"
		exit 1
	fi
	# Fix CWD to include path to package
	sed -i 's/CWD=$(pwd)/CWD=${CWD:-$(pwd)}/' "$path/$package.SlackBuild"
	# Check for built package
	if [ $built -eq 1 ]; then
		echo "Re-building $package"
	else	
		echo "Building $package"
	fi
	# Check if outdir is present (if yes, built package is saved there)
	if [ -z "$outdir" ]; then
		sudo -k CWD="$path" "$path/$package.SlackBuild" || exit 1
	else
		sudo -k OUTPUT="$outdir" CWD="$path" "$path/$package.SlackBuild" || exit 1
	fi 
	# After building revert the slackbuild to original state
	sed -i 's/CWD=${CWD:-$(pwd)}/CWD=$(pwd)/' "$path/$package.SlackBuild"
}
install-package () {
	# Check if package present
	if [[ `ls "$outdir/$package"* 2> /dev/null` ]] || [[ `ls "/tmp/$package"* 2> /dev/null` ]]; then
		pkgpath=`ls -t "/tmp/$package"* "$outdir/$package"* 2> /dev/null | head -n 1`
		echo "Installing $package"
		sudo -k /sbin/installpkg "$pkgpath"
	else
		echo "Package: $package N/A"
		exit 1
	fi 
}
upgrade-package () {
	# Check if package present
	if [[ `ls "$outdir/$package"* 2> /dev/null` ]] || [[ `ls "/tmp/$package"* 2> /dev/null` ]]; then
		pkgpath=`ls -t "/tmp/$package"* "$outdir/$package"* 2> /dev/null | head -n 1`
		echo "Upgrading $package"
		sudo -k /sbin/upgradepkg "$pkgpath"
	else
		echo "Package: $package N/A"
		exit 1
	fi 
}

# Options
case "$1" in
search|-s)
	check-option "$2"
	find -L "$repodir" -maxdepth 2 -type d -iname "*$package*" -printf "%P\n"
	;;
query|-q)
	check-option "$2"
	find "/var/log/packages" -iname "*$package*" -printf "%f\n"
	;;
find|-f)
	check-option "$2"
	echo "Present in slackbuilds repository:"
	find -L "$repodir" -mindepth 2 -maxdepth 2 -type d -iname "*$package*" -printf "%P\n"
	echo -e "\nInstalled:"
	find "/var/log/packages" -iname "*$package*_SBo" -printf "%f\n"
	;;
info|-i)
	check-option "$2"
	get-path
	get-content "$path/$package.info"
	;;
readme|-r)
	check-option "$2"
	get-path
	get-content "$path/README"
	;;
view|-v)
	check-option "$2"
	get-path
	if [ -e $editor ]; then
		$editor "$path/$package.SlackBuild"
	else
		less "$path/$package.Slackbuild"
	fi
	;;
desc|-d)
	check-option "$2"
	get-path
	get-content "$path/slack-desc"
	;;
list|-l)
	check-option "$2"
	get-path
	ls $path
	;;
goto|-g)
	check-option "$2"
	get-path
	if [ "$TERM" == "linux" ]; then
		echo "Goto: N/A"
		exit 1
	fi
	if [ -e /usr/bin/xfce4-terminal ]; then
        	xfce4-terminal --working-directory="$path"
	elif [ -e /usr/bin/konsole ]; then
		konsole --workdir "$path"
	elif [ -e /usr/bin/xterm ]; then
		xterm -e 'cd "$path" && /bin/bash'
	else
		echo "Goto: N/A"
		exit 1
	fi
	;;
get|-G)
	get-path
	check-option "$2"
	get-package
	;;
build|-B)
	get-path
	check-option "$2"
	build-package
	;;
install|-I)
	check-option "$2"
	install-package
	;;
upgrade|-U)
	check-option "$2"
	upgrade-package
	;; 
remove|-R)
	check-option "$2"
	echo "Removing $package"
	# Check if package is installed 
	if [ -f "/var/log/packages/$package"* ]; then
		rpkg=`ls "/var/log/packages/$package"*`
		sudo -k /sbin/removepkg "$rpkg"
	else
		echo "Package: $package N/A"
		exit 1
	fi
	;;
process|-P)
	check-option "$2"
	get-path
	echo "Processing $package..."
	get-package || exit 1
	process-built-package || exit 1
	# Check if package is already installed
	if [ -f "/var/log/packages/$package"* ]; then
		upgrade-package
	elif [ ! -f "/var/log/packages/$package"* ]; then
		install-package
	else
		echo "N/A"
		exit 1
	fi
	;;
--update|-u)
	if [ -z "$gitdir" ]; then
		echo "Git directory not specified."
		exit 1
	fi
	if [ -d "$gitdir" ]; then
		echo "Updating git repo $gitdir"
		git --git-dir="$gitdir" --work-tree="$repodir" pull origin master
	else
		echo "Git directory $gitdir doesnt exist.."
		exit 1
	fi
	;;
--all|-a)
	find "/var/log/packages" -name "*_SBo*" -printf "%f\n" ;;
--check|-c)
	for i in /var/log/packages/*_SBo*; do
		package=`basename $i | rev | cut -d "-" -f 4- | rev`
		pkgver=`basename $i | rev | cut -d "-" -f 3 | rev`
		path=`find -L "$repodir" -type d -maxdepth 2 -name "$package"`
		if [ -f "$path/$package.info" ]; then
			. "$path/$package.info"
		else
			# For packages not present in slackbuilds repo
			VERSION=$pkgver
		fi
		if [[ ! "$pkgver" == "$VERSION" ]]; then
			printf "$package:\t$pkgver -> $VERSION\n"
		fi
	done
	;;
--version|-V)
        echo -e "asbt version-$ver" ;;
--help|-h|*)
	cat << EOF 
Usage: asbt <option> [package]
Options-
	[search,-s]	[query,-q]	[find,-f]
	[info,-i]	[readme,-r]	[desc,-d]
	[view,-v]	[goto,-g]	[list,-l]
	[get,-G]	[build,-B]	[install,-I]
	[upgrade,-U]	[remove,-R]	[process,-P]
	[--update,-u]	[--check,-c]	[--all,-a]	
	[--help,-h]	[--version,-V]

Using repository: $repodir
For more info, see the man page and/or the README.
EOF
       ;;
esac

# Cleanup
unset repodir
unset package
unset path
unset srcdir
unset outdir
unset pkgname
unset pkgnam
unset pkgpath
unset link
unset arch
unset conf
unset rpkg
unset src
unset md5
unset valid
unset built
unset editor
exit 0
