#!/bin/bash
# slack : A package manager for a local slackbuilds repository.
##
# Copyright (C) 2014 Aaditya Bagga <aaditya_gnulinux@zoho.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

ver="0.4.0" # Version

# Variables used:
repodir="/home/$USER/slackbuilds" # Repository for slackbuilds. Required.
#repodir="/home/$USER/git/slackbuilds" # Alternate repositort for slackbuilds.
srcpath="/home/$USER/src" # Where the downloaded source is to be placed.
#srcpath="" # Leave blank for saving it in the same directory as the slackbuild.
outdir="/home/$USER/packages" # Where the build package will be placed.
#outdir="" # Leave it blank for putting built package(s) in /tmp.
gitdir="/home/$USER/git/slackbuilds/.git" # Slackbuilds git repo directory.
#gitdir="" # Leave it blank if you dont want to use the --update option.
config="/etc/slack/slack.conf" # Config file which over-rides above defaults.
#config="" # Leave it blank for using above defaults
package="$2" # Name of package input by the user.

# Check for the configuration file 
if [ -e "$conf" ]; then
	. "$conf"
fi

# Check the no of input parameters
if [ $# -gt 2 ] ; then
	echo "Invalid syntax. Type slack -h for more info."
	exit 1
fi

# Check directories (variables)
if [ ! -d "$repodir" ]; then
	echo "slackbuilds repository $repodir doesnt exist.."
	exit 1 
fi

# Functions
check-option () {
	if [ ! "$1" ]; then
		echo "Additional parameter(s) required for this option. Type slack -h for more info."
		exit 1
	fi
}
get-path() {
	path=`find "$repodir" -type d -maxdepth 2 -name "$package"`
	# Check path (if directory exists)
	if [ ! -d "$path" ]; then
		echo "$path N/A"
		exit 1
	fi
}
search-package () {
	find "$repodir" -maxdepth 2 -iname "*$package*"
}
query-package () {
	find "/var/log/packages" -iname "*$package*" -printf "%f\n"
}
get-content () {
	if [ -f "$1" ]; then
		cat "$1" # Return the content of the argument passed.
	else
		echo "N/A"
		exit 1
	fi
}
get-package () {
	get-path
	link=`cat "$path/$package.info" | grep -w "DOWNLOAD"| cut -f 2 -d '"'`
	linkx64=`cat "$path/$package.info" | grep -w "DOWNLOAD_x86_64"| cut -f 2 -d '"'`
	# Check if srcpath is specified (if yes, download is saved there)
	if [ -z "$srcpath" ]; then
		# Check for architecture in package
		if [[ `uname -m` == "x86_64" ]] && [[ -n "$linkx64" ]] && [[ `echo "$linkx64" | grep -e "http" -e "ftp"` ]] ; then
			wget --directory-prefix="$path" -N "$linkx64"
		else
			wget --directory-prefix="$path" -N "$link"
		fi
	else
		if [[ `uname -m` == "x86_64" ]] && [[ -n "$linkx64" ]] && [[ `echo "$linkx64" | grep -e "http" -e "ftp"` ]] ; then
			pkgname=`basename "$linkx64"`
			wget --directory-prefix="$srcpath" -N "$linkx64" && ln -s "$srcpath/$pkgname" "$path"
		else
			pkgname=`basename "$link"`
			wget --directory-prefix="$srcpath" -N "$link" && ln -s "$srcpath/$pkgname" "$path"
		fi
	fi
}
build-package () {
	chmod +x "$path/$package.SlackBuild"
	# Fix CWD to include path to package
	sed -i 's/CWD=$(pwd)/CWD=${CWD:-$(pwd)}/' "$path/$package.SlackBuild"
	# Check if outdir is present (if yes, built package is saved there)
	if [ -z "$outdir" ]; then
		sudo CWD="$path" "$path/$package.SlackBuild"
	else
		sudo OUTPUT="$outdir" CWD="$path" "$path/$package.SlackBuild" 
	fi 
	# After building revert the slackbuild to original state
	sed -i 's/CWD=${CWD:-$(pwd)}/CWD=$(pwd)/' "$path/$package.SlackBuild"
}
install-package () {
	# Check if package present
	if [ -f "$outdir/$package"* ] || [ -f "/tmp/$package"* ]; then
		# Install the package
		if [ -z "$outdir" ]; then
			# Find path of built package
			pkgpath=`ls "/tmp/$package"*`
			sudo -k /sbin/installpkg "$pkgpath"
		else
			pkgpath=`ls "$outdir/$package"*`
			sudo -k /sbin/installpkg "$pkgpath"
   		fi
        else
		echo "N/A"
		exit 1
	fi 
}
upgrade-package () {
	# Check if package present
	if [ -f "$outdir/$package"* ] || [ -f "/tmp/$package"* ]; then
		# Upgrade the package
		if [ -z "$outdir" ]; then
			pkgpath=`ls "/tmp/$package"*`
			sudo -k /sbin/upgradepkg "$pkgpath"
		else
			pkgpath=`ls "$outdir/$package"*`
			sudo -k /sbin/upgradepkg "$pkgpath"
		fi
	else
		echo "N/A"
		exit 1

	fi 
}

# Options
case "$1" in
search|-s)
	check-option "$2"
	search-package
	;;
query|-q)
	check-option "$2"
	query-package
	;;
find|-f)
	check-option "$2"
	echo "Present in slackbuilds repository:"
	search-package
	echo -e "\nInstalled:"
	query-package
	;;
info|-i)
	check-option "$2"
	get-path
	get-content "$path/$package.info"
	;;
readme|-r)
	check-option "$2"
	get-path
	get-content "$path/README"
	;;
view|-v)
	check-option "$2"
	get-path
	less "$path/$package.SlackBuild"
	;;
desc|-d)
	check-option "$2"
	get-path
	get-content "$path/slack-desc"
	;;
list|-l)
	check-option "$2"
	get-path
	ls $path
	;;
goto|-g)
	check-option "$2"
	get-path
	if [ "$TERM" == "linux" ]; then
		echo "N/A"
		exit 1
	fi
	if [ -e /usr/bin/xfce4-terminal ]; then
        	xfce4-terminal --working-directory="$path"
	elif [ -e /usr/bin/konsole ]; then
		konsole --workdir "$path"
	elif [ -e /usr/bin/xterm ]; then
		xterm -e 'cd "$path" && /bin/bash'
	else
		echo "N/A"
		exit 1
	fi
	;;
get|-G)
	check-option "$2"
	get-package
	;;
build|-B)
	check-option "$2"
	get-path
	echo "Building $package"
	build-package
	;;
install|-I)
	check-option "$2"
	echo "Installing $package"
	install-package
	;;
upgrade|-U)
	check-option "$2"
	echo "Upgrading $package"
	upgrade-package
	;; 
remove|-R)
	check-option "$2"
	echo "Removing $package"
	# Check if package is installed 
	if [ -f "/var/log/packages/$package"* ]; then
		sudo -k /sbin/removepkg "$package"
	else
		echo "N/A"
		exit 1
	fi
	;;
process|-P)
	check-option "$2"
	get-package
	build-package
	# Check if package is already installed
	if [ -f "/var/log/packages/$package"* ]; then
		upgrade-package
	else
		install-package
	fi
	;;
--update|-u)
	if [ -z "$gitdir" ]; then
		echo "Git directory not specified."
		exit 1
	fi
	if [ -d "$gitdir" ]; then
		git --git-dir="$gitdir" pull origin master
	else
		echo "Git directory $gitdir doesnt exist.."
		exit 1
	fi
	;;
--all|-a)
	find "/var/log/packages" -name "*_SBo*" -printf "%f\n" ;;
--version|-V)
        echo -e "Version-$ver" ;;
--help|-h|*)
	cat << EOF 
Usage: slack <option> [package]
Options-
	[search,-s]	[query,-q]	[find,-f]
	[info,-i]	[readme,-r]	[desc,-d]
	[view,-v]	[goto,-g]	[list,-l]
	[get,-G]	[build,-B]	[install,-I]
	[upgrade,-U]	[remove,-R]	[process,-P]
	[--update,-u]	[--all,-a]
	[--help,-h]	[--version,-V]

For more info, see the man page and/or the README.
EOF
       ;;
esac

# Cleanup
unset repodir
unset package
unset path
unset srcpath
unset outdir
unset pkgname
unset pkgpath
unset link
unset linkx64
unset conf
exit 0
